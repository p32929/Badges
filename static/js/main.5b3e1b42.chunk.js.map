{"version":3,"sources":["serviceWorker.js","Others/GlobalMethods.js","Others/OvermindHelper.js","Components/Section.js","Components/Footer.js","Components/WholeThing.js","index.js"],"names":["Boolean","window","location","hostname","match","replacer","str","state","replace","user","repo","dartpackage","useOvermind","createHook","overmind","createOvermind","code","servicesAndBadges","name","placeholder","splitter","value","actions","splittedParts","URL","pathname","split","setUser","setRepo","e","badges","moreDetails","checked","setDartPackage","setCodeTexts","setCheckboxState","cb","index","index2","b","setAllChecked","i","length","setAllUnchecked","j","Section","props","item","Paper","style","padding","margin","elevation","Grid","container","direction","justify","alignContent","alignItems","Typography","variant","xs","TextField","onChange","target","toString","size","marginTop","textAlignLast","width","spacing","map","badge","Checkbox","src","Button","onClick","color","styles","text","Footer","height","background","href","WholeThing","key","fullWidth","rows","multiline","navigator","clipboard","writeText","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b3e1b42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","export const replacer = (str, state) => {\r\n    return str.replace(/user/g, state.user).replace(/repo/g, state.repo).replace(/dartpackage/g, state.dartpackage)\r\n}","// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {replacer} from '../Others/GlobalMethods'\r\nimport {createHook} from \"overmind-react\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        user: \"p32929\",\r\n        repo: \"EasiestSqlLibrary\",\r\n        dartpackage: \"easiestdb\",\r\n        code: \"\",\r\n        servicesAndBadges: [\r\n            {\r\n                name: \"Github\",\r\n                placeholder: \"Github repo url\",\r\n                splitter: (value, actions) => {\r\n                    try {\r\n                        var splittedParts = new URL(value).pathname.split(\"/\")\r\n                        actions.setUser(splittedParts[1])\r\n                        actions.setRepo(splittedParts[2])\r\n                    } catch (e) {\r\n                        //\r\n                    }\r\n                },\r\n                badges: [\r\n                    \"https://badgen.net/github/release/user/repo\",\r\n                    \"https://badgen.net/github/release/user/repo/stable\",\r\n                    \"https://badgen.net/github/tag/user/repo\",\r\n                    \"https://badgen.net/github/watchers/user/repo\",\r\n                    \"https://badgen.net/github/checks/user/repo\",\r\n                    \"https://badgen.net/github/status/user/repo\",\r\n                    \"https://badgen.net/github/stars/user/repo\",\r\n                    \"https://badgen.net/github/forks/user/repo\",\r\n                    \"https://badgen.net/github/issues/user/repo\",\r\n                    \"https://badgen.net/github/open-issues/user/repo\",\r\n                    \"https://badgen.net/github/closed-issues/user/repo\",\r\n                    \"https://badgen.net/github/label-issues/user/repo/help-wanted/open\",\r\n                    \"https://badgen.net/github/prs/user/repo\",\r\n                    \"https://badgen.net/github/open-prs/user/repo\",\r\n                    \"https://badgen.net/github/closed-prs/user/repo\",\r\n                    \"https://badgen.net/github/merged-prs/user/repo\",\r\n                    \"https://badgen.net/github/commits/user/repo\",\r\n                    \"https://badgen.net/github/last-commit/user/repo\",\r\n                    \"https://badgen.net/github/branches/user/repo\",\r\n                    \"https://badgen.net/github/releases/user/repo\",\r\n                    \"https://badgen.net/github/tags/user/repo\",\r\n                    \"https://badgen.net/github/license/user/repo\",\r\n                    \"https://badgen.net/github/contributors/user/repo\",\r\n                    \"https://badgen.net/github/dependents-pkg/user/repo\"],\r\n                moreDetails: \"https://badgen.net/\",\r\n                checked: [\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                ]\r\n            },\r\n            {\r\n                name: \"Dart pub\",\r\n                placeholder: \"Pub.dev package url\",\r\n                splitter: (value, actions) => {\r\n                    try {\r\n                        var splittedParts = new URL(value).pathname.split(\"/\")\r\n                        actions.setDartPackage(splittedParts[2])\r\n                    } catch (e) {\r\n                        //\r\n                    }\r\n                },\r\n                badges: [\r\n                    \"https://badgen.net/pub/v/dartpackage\",\r\n                    \"https://badgen.net/pub/likes/dartpackage\",\r\n                    \"https://badgen.net/pub/sdk-version/dartpackage\",\r\n                    \"https://badgen.net/pub/flutter-platform/dartpackage\"\r\n                ],\r\n                moreDetails: \"https://badgen.net/\",\r\n                checked: [\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    actions: {\r\n        setUser({state}, user) {\r\n            state.user = user\r\n        },\r\n        setRepo({state}, repo) {\r\n            state.repo = repo\r\n            setCodeTexts(state)\r\n        },\r\n        setDartPackage({state}, dartpackage) {\r\n            state.dartpackage = dartpackage\r\n            setCodeTexts(state)\r\n        },\r\n        setCheckboxState({state}, cb) {\r\n            state.servicesAndBadges[cb.index].checked[cb.index2] = cb.b;\r\n            setCodeTexts(state)\r\n        },\r\n        setAllChecked({state}, index) {\r\n            var checked = []\r\n            for (var i = 0; i < state.servicesAndBadges[index].badges.length; i++) {\r\n                checked[i] = true\r\n            }\r\n            state.servicesAndBadges[index].checked = checked\r\n            setCodeTexts(state)\r\n        },\r\n        setAllUnchecked({state}, index) {\r\n            var checked = []\r\n            for (var i = 0; i < state.servicesAndBadges[index].badges.length; i++) {\r\n                checked[i] = false\r\n            }\r\n            state.servicesAndBadges[index].checked = checked\r\n            setCodeTexts(state)\r\n        }\r\n    }\r\n});\r\n\r\nvar setCodeTexts = (state) => {\r\n    var code = \"\"\r\n    for (var i = 0; i < state.servicesAndBadges.length; i++) {\r\n        for (var j = 0; j < state.servicesAndBadges[i].badges.length; j++) {\r\n            if (state.servicesAndBadges[i].checked[j]) {\r\n                // code += state.servicesAndBadges[i].badges[j] + \"\\n\";\r\n                // [![](https://badgen.net/pub/v/easiestdb)]()\r\n                code += `[![](${state.servicesAndBadges[i].badges[j]})]() `\r\n            }\r\n        }\r\n    }\r\n    code = replacer(code, state)\r\n    state.code = code;\r\n}","import React from 'react';\r\nimport {useOvermind} from '../Others/OvermindHelper'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {replacer} from \"../Others/GlobalMethods\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Section = (props) => {\r\n    const {actions, state} = useOvermind()\r\n    const {item, index} = props;\r\n    return (\r\n        <Paper style={{padding: 16, margin: 8}} elevation={2}>\r\n            <Grid container direction='column' justify='center' alignContent='center' alignItems='center'>\r\n                <Typography variant='h6'>{item.name}</Typography>\r\n                <Typography variant='subtitle2'>Thanks to {item.moreDetails}</Typography>\r\n                <Grid container item xs alignItems='center' alignContent='center' justify='center'>\r\n                    <TextField onChange={(e) => {\r\n                        item.splitter(e.target.value.toString(), actions)\r\n                    }} size='small' variant='outlined'\r\n                               style={{marginTop: 8, textAlignLast: 'center', width: '50%'}}\r\n                               placeholder={state.servicesAndBadges[index].placeholder}></TextField>\r\n                </Grid>\r\n\r\n                <Grid style={{marginTop: 16}} container direction='row' spacing={1}>\r\n                    {\r\n                        item.badges.map((badge, index2) => {\r\n                            return <Grid container direction='row' item xs={3}>\r\n                                <Checkbox name={index2} checked={state.servicesAndBadges[index].checked[index2]}\r\n                                          onChange={(e) => {\r\n                                              var b = e.target.checked\r\n                                              const cb = {\r\n                                                  b,\r\n                                                  index,\r\n                                                  index2\r\n                                              }\r\n                                              actions.setCheckboxState(cb)\r\n                                          }}/>\r\n                                <img src={replacer(badge, state)}/>\r\n                            </Grid>\r\n\r\n                            // return <Grid item xs={12}>\r\n                            //     <p>{replacer(badge, state)}</p>\r\n                            // </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <Grid container direction='row' justify='center' alignItems='center'\r\n                  alignContent='center'>\r\n                <Button onClick={() => {\r\n                    actions.setAllChecked(index);\r\n                }} style={{margin: 8}} color='primary' variant='contained'>Select All</Button>\r\n                <Button onClick={() => {\r\n                    actions.setAllUnchecked(index)\r\n                }} style={{margin: 8}} color='primary' variant='contained'>Select None</Button>\r\n            </Grid>\r\n\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = {\r\n    text: {\r\n        color: \"#FFF\"\r\n    }\r\n}\r\n\r\nconst Footer = (props) => {\r\n    const {state, actions} = useOvermind()\r\n\r\n    return (\r\n        <Grid alignContent='center' alignItems='center' justify='center'\r\n              style={{height: 56, background: \"#757575\", margin: 8, width: '100%'}} container direction='column'>\r\n            <Typography style={styles.text}>Star/Fork it: <a\r\n                style={{color: \"#fff\"}}\r\n                href=\"https://github.com/p32929/Badges/\">https://github.com/p32929/Badges/</a></Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport {useOvermind} from '../Others/OvermindHelper'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Section from \"./Section\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst WholeThing = (props) => {\r\n    const {actions, state} = useOvermind()\r\n\r\n    return (\r\n        <Grid>\r\n            {\r\n                state.servicesAndBadges.map((item, index) => {\r\n                    return <Section item={item} key={index} index={index}/>\r\n                })\r\n            }\r\n\r\n            <Paper style={{padding: 16, margin: 8}} elevation={2}>\r\n                <Grid container direction='column' alignItems='center' alignContent='center' justify='center'>\r\n                    <TextField size='small' style={{textAlignLast: 'left'}} fullWidth variant='outlined'\r\n                               value={state.code}\r\n                               rows={5}\r\n                               multiline={true}\r\n                               placeholder=\"CODE TO COPY\"/>\r\n                    <Button onClick={() => {\r\n                        navigator.clipboard.writeText(state.code)\r\n                    }} style={{width: '100%', margin: 8}} variant='contained' color='primary'>Copy to\r\n                        clipboard</Button>\r\n                </Grid>\r\n            </Paper>\r\n\r\n            <Footer/>\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default WholeThing;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"overmind-react\";\r\nimport {overmind} from './Others/OvermindHelper'\r\nimport WholeThing from \"./Components/WholeThing\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider value={overmind}>\r\n            <WholeThing/>\r\n        </Provider>\r\n    </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}